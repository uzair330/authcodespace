name: uzair_mart
services:
  pgadmin4:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "9090:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "uzair330@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "admin123"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

    
  
    
  
  api_product:
    build:
      context: ./products_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./products_service:/code  # Sync local development directory with the container
    depends_on:
      - product_db
      - broker
    ports:
      - "8000:8000"  # Expose container port 8000 to host port 8000  

  product_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: product_db_cont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - '5433:5432'
    volumes:
      - product_db_data:/var/lib/postgresql/data

  api_order:
    build:
      context: ./order_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order_service:/code  # Sync local development directory with the container
    depends_on:
      - order_db
      - broker
    ports:
      - "8003:8000"  # Expose container port 8000 to host port 8000  

  order_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: order_db_cont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - '5434:5432'
    volumes:
      - order_db_data:/var/lib/postgresql/data



  api_nodification:
    build:
      context: ./nodification_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./nodification_service:/code  # Sync local development directory with the container
    depends_on:
      - nodification_db
      - broker
    ports:
      - "8002:8000"  # Expose container port 8000 to host port 8000  

  nodification_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: nodification_db_cont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - '5436:5432'
    volumes:
      - nodification_db_data:/var/lib/postgresql/data

  auth_api:
    container_name: auth_cont
    build:
      context: ./auth_service
      dockerfile: Dockerfile.dev
    depends_on:
        - auth_db
    ports:
      - "8005:8000"  # Expose container port 8000 to host port 8000  
    
  auth_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: auth_db_Cont
    environment:
        - POSTGRES_USER=uzair
        - POSTGRES_PASSWORD=admin123
        - POSTGRES_DB=auth_database
    ports:
        - '5437:5432'
    volumes:
        - auth_db_data:/var/lib/postgresql/data

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

volumes:
  product_db_data:
    driver: local
  order_db_data:
    driver: local
  nodification_db_data:
    driver: local
  auth_db_data:
    driver: local
  pgadmin_data:
    driver: local
networks:
  default:
    driver: bridge

